#!/bin/bash

qmake

##########################################
# Test release version
##########################################
make release

n_errors=0

if [[ ! -f main ]]; then 
  echo "Incorrect: code does not compile cleanly with high warning levels"
  ((++n_errors))
fi

#####################
# Test exit states
#####################

./main
state_zero=`echo $?`

./main 1
state_one=`echo $?`

./main 2
state_two=`echo $?`

./main nonsense
state_nonsense=`echo $?`

./main 2 1
state_two_one=`echo $?`


if [[ ! $state_zero -eq 1 ]]; then
  echo "Incorrect: './is_even' must return an exit state of 1, as there are too few arguments"
  ((++n_errors))
fi

if [[ ! $state_one -eq 0 ]]; then
  echo "Incorrect: './is_even 1' must return an exit state of 0"
  ((++n_errors))
fi

if [[ ! $state_two -eq 0 ]]; then
  echo "Incorrect: './is_even 2' must return an exit state of 0"
  ((++n_errors))
fi

if [[ ! $state_nonsense -eq 1 ]]; then
  echo "Incorrect: './is_even nonsense' must return an exit state of 1, as 'nonsense' is no integer"
  ((++n_errors))
fi

if [[ ! $state_two_one -eq 1 ]]; then
  echo "Incorrect: './is_even 2 1 ' must return an exit state of 1, as there are too many arguments"
  ((++n_errors))
fi

#####################
# Test output
#####################

# Create expected result
echo "false" > false.txt
echo "true" > true.txt

# Create the actual result
./main -1 > created_minus_1.txt
./main 0 > created_0.txt
./main 1 > created_1.txt
./main 2 > created_2.txt
./main 12345678901234567891 > created_12345678901234567891.txt
./main 12345678901234567892 > created_12345678901234567892.txt

# Compare results
if ! cmp --silent created_minus_1.txt false.txt; then
  echo "Incorrect: 'is_even -1' should display literally 'false', followed by a newline"
  ((++n_errors))
fi

if ! cmp --silent created_0.txt true.txt; then
  echo "Incorrect: 'is_even 0' should display literally 'true', followed by a newline"
  ((++n_errors))
fi

if ! cmp --silent created_1.txt false.txt; then
  echo "Incorrect: 'is_even 1' should display literally 'false', followed by a newline"
  ((++n_errors))
fi

if ! cmp --silent created_2.txt true.txt; then
  echo "Incorrect: 'is_even 2' should display literally 'true', followed by a newline"
  ((++n_errors))
fi

if ! cmp --silent created_12345678901234567891.txt false.txt; then
  echo "Incorrect: 'is_even 12345678901234567891' should display literally 'false', followed by a newline"
  ((++n_errors))
fi

if ! cmp --silent created_12345678901234567892.txt true.txt; then
  echo "Incorrect: 'is_even 12345678901234567892' should display literally 'true', followed by a newline"
  ((++n_errors))
fi

rm *.txt
rm *.txt

##########################################
# C++ guidelines
##########################################

./check_cpp_core_guidelines
state_core_guidelines=`echo $?`

if [[ ! $state_core_guidelines -eq 0 ]]; then
  # No need to be verbose here, 'check_cpp_core_guidelines' already does so 
  ((++n_errors))
fi

./check_course_guidelines
state_course_guidelines=`echo $?`

if [[ ! $state_course_guidelines -eq 0 ]]; then
  # No need to be verbose here, 'check_course_guidelines' already does so 
  ((++n_errors))
fi

./check_doc
state_doc=`echo $?`

if [[ ! $state_doc -eq 0 ]]; then
  # No need to be verbose here, 'check_doc' already does so 
  ((++n_errors))
fi

##########################################
# Test debug version
##########################################
make debug

./main
./main 1234567890123456789012345678901
./main 1234567890123456789012345678902
./main nonsense
./main 1 2

#####################
# Test code coverage
#####################

n=`gcov -n -o debug *.cpp| head -n 2 | tail -n 1 | egrep "100\.00\%" | wc -l`
if [ ! "$n" -eq "1" ]; then
  echo "Incorrect: must have 100% code coverage. Current code coverage:"
  gcov -n -o debug *.cpp | head -n 2 | tail -n 1
  ((++n_errors))
fi

exit $n_errors
